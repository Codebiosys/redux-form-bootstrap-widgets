// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Redux Wrapper renders 1`] = `
<Connect(ReduxForm)
  clearSubmitErrors={true}
  component="input"
  form="formname"
  name="name"
  type="text"
>
  <ReduxForm
    clearSubmitErrors={true}
    component="input"
    dispatch={[Function]}
    form="formname"
    name="name"
    type="text"
  >
    <Connect(Form(ReduxField))
      clearSubmitErrors={true}
      component="input"
      destroyOnUnmount={false}
      dispatch={[Function]}
      enableReinitialize={false}
      forceUnregisterOnUnmount={false}
      form="formname"
      getFormState={[Function]}
      keepDirtyOnReinitialize={false}
      name="name"
      persistentSubmitErrors={false}
      pure={true}
      shouldAsyncValidate={[Function]}
      shouldError={[Function]}
      shouldValidate={[Function]}
      shouldWarn={[Function]}
      touchOnBlur={true}
      touchOnChange={false}
      type="text"
    >
      <Form(ReduxField)
        anyTouched={false}
        array={
          Object {
            "insert": [Function],
            "move": [Function],
            "pop": [Function],
            "push": [Function],
            "remove": [Function],
            "removeAll": [Function],
            "shift": [Function],
            "splice": [Function],
            "swap": [Function],
            "unshift": [Function],
          }
        }
        arrayInsert={[Function]}
        arrayMove={[Function]}
        arrayPop={[Function]}
        arrayPush={[Function]}
        arrayRemove={[Function]}
        arrayRemoveAll={[Function]}
        arrayShift={[Function]}
        arraySplice={[Function]}
        arraySwap={[Function]}
        arrayUnshift={[Function]}
        asyncValidating={false}
        autofill={[Function]}
        blur={[Function]}
        change={[Function]}
        clearAsyncError={[Function]}
        clearSubmit={[Function]}
        clearSubmitErrors={[Function]}
        component="input"
        destroy={[Function]}
        destroyOnUnmount={false}
        dirty={false}
        dispatch={[Function]}
        enableReinitialize={false}
        focus={[Function]}
        forceUnregisterOnUnmount={false}
        form="formname"
        getFormState={[Function]}
        initialize={[Function]}
        initialized={false}
        invalid={false}
        keepDirtyOnReinitialize={false}
        name="name"
        persistentSubmitErrors={false}
        pristine={true}
        pure={true}
        registerField={[Function]}
        reset={[Function]}
        setSubmitFailed={[Function]}
        setSubmitSucceeded={[Function]}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        startAsyncValidation={[Function]}
        startSubmit={[Function]}
        stopAsyncValidation={[Function]}
        stopSubmit={[Function]}
        submit={[Function]}
        submitFailed={false}
        submitSucceeded={false}
        submitting={false}
        syncErrors={Object {}}
        syncWarnings={Object {}}
        touch={[Function]}
        touchOnBlur={true}
        touchOnChange={false}
        type="text"
        unregisterField={[Function]}
        untouch={[Function]}
        updateSyncErrors={[Function]}
        updateSyncWarnings={[Function]}
        valid={true}
        validExceptSubmit={true}
        values={Object {}}
      >
        <ReduxField
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          asyncValidate={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          component="input"
          destroy={[Function]}
          dirty={false}
          dispatch={[Function]}
          form="formname"
          handleSubmit={[Function]}
          initialize={[Function]}
          initialized={false}
          invalid={false}
          name="name"
          pristine={true}
          pure={true}
          reset={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          touch={[Function]}
          type="text"
          untouch={[Function]}
          valid={true}
        >
          <Field
            component="input"
            name="name"
            type="text"
          >
            <Connect(ConnectedField)
              _reduxForm={
                Object {
                  "anyTouched": false,
                  "array": Object {
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "removeAll": [Function],
                    "shift": [Function],
                    "splice": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                  },
                  "arrayInsert": [Function],
                  "arrayMove": [Function],
                  "arrayPop": [Function],
                  "arrayPush": [Function],
                  "arrayRemove": [Function],
                  "arrayRemoveAll": [Function],
                  "arrayShift": [Function],
                  "arraySplice": [Function],
                  "arraySwap": [Function],
                  "arrayUnshift": [Function],
                  "asyncErrors": undefined,
                  "asyncValidate": [Function],
                  "asyncValidating": false,
                  "autofill": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "clearAsyncError": [Function],
                  "clearSubmit": [Function],
                  "clearSubmitErrors": [Function],
                  "component": "input",
                  "destroy": [Function],
                  "destroyOnUnmount": false,
                  "dirty": false,
                  "dispatch": [Function],
                  "enableReinitialize": false,
                  "error": undefined,
                  "focus": [Function],
                  "forceUnregisterOnUnmount": false,
                  "form": "formname",
                  "getFormState": [Function],
                  "getValues": [Function],
                  "initialValues": undefined,
                  "initialize": [Function],
                  "initialized": false,
                  "invalid": false,
                  "keepDirtyOnReinitialize": false,
                  "name": "name",
                  "persistentSubmitErrors": false,
                  "pristine": true,
                  "pure": true,
                  "register": [Function],
                  "registerField": [Function],
                  "registerInnerOnSubmit": [Function],
                  "registeredFields": undefined,
                  "reset": [Function],
                  "sectionPrefix": undefined,
                  "setSubmitFailed": [Function],
                  "setSubmitSucceeded": [Function],
                  "shouldAsyncValidate": [Function],
                  "shouldError": [Function],
                  "shouldValidate": [Function],
                  "shouldWarn": [Function],
                  "startAsyncValidation": [Function],
                  "startSubmit": [Function],
                  "stopAsyncValidation": [Function],
                  "stopSubmit": [Function],
                  "submit": [Function],
                  "submitFailed": false,
                  "submitSucceeded": false,
                  "submitting": false,
                  "syncErrors": Object {},
                  "syncWarnings": Object {},
                  "touch": [Function],
                  "touchOnBlur": true,
                  "touchOnChange": false,
                  "triggerSubmit": undefined,
                  "type": "text",
                  "unregister": [Function],
                  "unregisterField": [Function],
                  "untouch": [Function],
                  "updateSyncErrors": [Function],
                  "updateSyncWarnings": [Function],
                  "valid": true,
                  "validExceptSubmit": true,
                  "values": Object {},
                  "warning": undefined,
                }
              }
              component="input"
              name="name"
              normalize={[Function]}
              type="text"
            >
              <ConnectedField
                _reduxForm={
                  Object {
                    "anyTouched": false,
                    "array": Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    },
                    "arrayInsert": [Function],
                    "arrayMove": [Function],
                    "arrayPop": [Function],
                    "arrayPush": [Function],
                    "arrayRemove": [Function],
                    "arrayRemoveAll": [Function],
                    "arrayShift": [Function],
                    "arraySplice": [Function],
                    "arraySwap": [Function],
                    "arrayUnshift": [Function],
                    "asyncErrors": undefined,
                    "asyncValidate": [Function],
                    "asyncValidating": false,
                    "autofill": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearAsyncError": [Function],
                    "clearSubmit": [Function],
                    "clearSubmitErrors": [Function],
                    "component": "input",
                    "destroy": [Function],
                    "destroyOnUnmount": false,
                    "dirty": false,
                    "dispatch": [Function],
                    "enableReinitialize": false,
                    "error": undefined,
                    "focus": [Function],
                    "forceUnregisterOnUnmount": false,
                    "form": "formname",
                    "getFormState": [Function],
                    "getValues": [Function],
                    "initialValues": undefined,
                    "initialize": [Function],
                    "initialized": false,
                    "invalid": false,
                    "keepDirtyOnReinitialize": false,
                    "name": "name",
                    "persistentSubmitErrors": false,
                    "pristine": true,
                    "pure": true,
                    "register": [Function],
                    "registerField": [Function],
                    "registerInnerOnSubmit": [Function],
                    "registeredFields": undefined,
                    "reset": [Function],
                    "sectionPrefix": undefined,
                    "setSubmitFailed": [Function],
                    "setSubmitSucceeded": [Function],
                    "shouldAsyncValidate": [Function],
                    "shouldError": [Function],
                    "shouldValidate": [Function],
                    "shouldWarn": [Function],
                    "startAsyncValidation": [Function],
                    "startSubmit": [Function],
                    "stopAsyncValidation": [Function],
                    "stopSubmit": [Function],
                    "submit": [Function],
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "syncErrors": Object {},
                    "syncWarnings": Object {},
                    "touch": [Function],
                    "touchOnBlur": true,
                    "touchOnChange": false,
                    "triggerSubmit": undefined,
                    "type": "text",
                    "unregister": [Function],
                    "unregisterField": [Function],
                    "untouch": [Function],
                    "updateSyncErrors": [Function],
                    "updateSyncWarnings": [Function],
                    "valid": true,
                    "validExceptSubmit": true,
                    "values": Object {},
                    "warning": undefined,
                  }
                }
                asyncValidating={false}
                component="input"
                dirty={false}
                dispatch={[Function]}
                name="name"
                normalize={[Function]}
                pristine={true}
                type="text"
              >
                <input
                  name="name"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onDragStart={[Function]}
                  onDrop={[Function]}
                  onFocus={[Function]}
                  type="text"
                  value=""
                />
              </ConnectedField>
            </Connect(ConnectedField)>
          </Field>
        </ReduxField>
      </Form(ReduxField)>
    </Connect(Form(ReduxField))>
  </ReduxForm>
</Connect(ReduxForm)>
`;

exports[`The Redux Wrapper renders a multi field component 1`] = `
<Connect(ReduxForm)
  clearSubmitErrors={true}
  component={[Function]}
  form="foobar"
  names={
    Array [
      "firstName",
      "lastName",
    ]
  }
>
  <ReduxForm
    clearSubmitErrors={true}
    component={[Function]}
    dispatch={[Function]}
    form="foobar"
    names={
      Array [
        "firstName",
        "lastName",
      ]
    }
  >
    <Connect(Form(ReduxFields))
      clearSubmitErrors={true}
      component={[Function]}
      destroyOnUnmount={false}
      dispatch={[Function]}
      enableReinitialize={false}
      forceUnregisterOnUnmount={false}
      form="foobar"
      getFormState={[Function]}
      keepDirtyOnReinitialize={false}
      names={
        Array [
          "firstName",
          "lastName",
        ]
      }
      persistentSubmitErrors={false}
      pure={true}
      shouldAsyncValidate={[Function]}
      shouldError={[Function]}
      shouldValidate={[Function]}
      shouldWarn={[Function]}
      touchOnBlur={true}
      touchOnChange={false}
    >
      <Form(ReduxFields)
        anyTouched={false}
        array={
          Object {
            "insert": [Function],
            "move": [Function],
            "pop": [Function],
            "push": [Function],
            "remove": [Function],
            "removeAll": [Function],
            "shift": [Function],
            "splice": [Function],
            "swap": [Function],
            "unshift": [Function],
          }
        }
        arrayInsert={[Function]}
        arrayMove={[Function]}
        arrayPop={[Function]}
        arrayPush={[Function]}
        arrayRemove={[Function]}
        arrayRemoveAll={[Function]}
        arrayShift={[Function]}
        arraySplice={[Function]}
        arraySwap={[Function]}
        arrayUnshift={[Function]}
        asyncValidating={false}
        autofill={[Function]}
        blur={[Function]}
        change={[Function]}
        clearAsyncError={[Function]}
        clearSubmit={[Function]}
        clearSubmitErrors={[Function]}
        component={[Function]}
        destroy={[Function]}
        destroyOnUnmount={false}
        dirty={false}
        dispatch={[Function]}
        enableReinitialize={false}
        focus={[Function]}
        forceUnregisterOnUnmount={false}
        form="foobar"
        getFormState={[Function]}
        initialize={[Function]}
        initialized={false}
        invalid={false}
        keepDirtyOnReinitialize={false}
        names={
          Array [
            "firstName",
            "lastName",
          ]
        }
        persistentSubmitErrors={false}
        pristine={true}
        pure={true}
        registerField={[Function]}
        reset={[Function]}
        setSubmitFailed={[Function]}
        setSubmitSucceeded={[Function]}
        shouldAsyncValidate={[Function]}
        shouldError={[Function]}
        shouldValidate={[Function]}
        shouldWarn={[Function]}
        startAsyncValidation={[Function]}
        startSubmit={[Function]}
        stopAsyncValidation={[Function]}
        stopSubmit={[Function]}
        submit={[Function]}
        submitFailed={false}
        submitSucceeded={false}
        submitting={false}
        syncErrors={Object {}}
        syncWarnings={Object {}}
        touch={[Function]}
        touchOnBlur={true}
        touchOnChange={false}
        unregisterField={[Function]}
        untouch={[Function]}
        updateSyncErrors={[Function]}
        updateSyncWarnings={[Function]}
        valid={true}
        validExceptSubmit={true}
        values={Object {}}
      >
        <ReduxFields
          anyTouched={false}
          array={
            Object {
              "insert": [Function],
              "move": [Function],
              "pop": [Function],
              "push": [Function],
              "remove": [Function],
              "removeAll": [Function],
              "shift": [Function],
              "splice": [Function],
              "swap": [Function],
              "unshift": [Function],
            }
          }
          asyncValidate={[Function]}
          asyncValidating={false}
          autofill={[Function]}
          blur={[Function]}
          change={[Function]}
          clearAsyncError={[Function]}
          clearSubmit={[Function]}
          clearSubmitErrors={[Function]}
          component={[Function]}
          destroy={[Function]}
          dirty={false}
          dispatch={[Function]}
          form="foobar"
          handleSubmit={[Function]}
          initialize={[Function]}
          initialized={false}
          invalid={false}
          names={
            Array [
              "firstName",
              "lastName",
            ]
          }
          pristine={true}
          pure={true}
          reset={[Function]}
          submit={[Function]}
          submitFailed={false}
          submitSucceeded={false}
          submitting={false}
          touch={[Function]}
          untouch={[Function]}
          valid={true}
        >
          <Fields
            component={[Function]}
            names={
              Array [
                "firstName",
                "lastName",
              ]
            }
          >
            <Connect(ConnectedFields)
              _reduxForm={
                Object {
                  "anyTouched": false,
                  "array": Object {
                    "insert": [Function],
                    "move": [Function],
                    "pop": [Function],
                    "push": [Function],
                    "remove": [Function],
                    "removeAll": [Function],
                    "shift": [Function],
                    "splice": [Function],
                    "swap": [Function],
                    "unshift": [Function],
                  },
                  "arrayInsert": [Function],
                  "arrayMove": [Function],
                  "arrayPop": [Function],
                  "arrayPush": [Function],
                  "arrayRemove": [Function],
                  "arrayRemoveAll": [Function],
                  "arrayShift": [Function],
                  "arraySplice": [Function],
                  "arraySwap": [Function],
                  "arrayUnshift": [Function],
                  "asyncErrors": undefined,
                  "asyncValidate": [Function],
                  "asyncValidating": false,
                  "autofill": [Function],
                  "blur": [Function],
                  "change": [Function],
                  "clearAsyncError": [Function],
                  "clearSubmit": [Function],
                  "clearSubmitErrors": [Function],
                  "component": [Function],
                  "destroy": [Function],
                  "destroyOnUnmount": false,
                  "dirty": false,
                  "dispatch": [Function],
                  "enableReinitialize": false,
                  "error": undefined,
                  "focus": [Function],
                  "forceUnregisterOnUnmount": false,
                  "form": "foobar",
                  "getFormState": [Function],
                  "getValues": [Function],
                  "initialValues": undefined,
                  "initialize": [Function],
                  "initialized": false,
                  "invalid": false,
                  "keepDirtyOnReinitialize": false,
                  "names": Array [
                    "firstName",
                    "lastName",
                  ],
                  "persistentSubmitErrors": false,
                  "pristine": true,
                  "pure": true,
                  "register": [Function],
                  "registerField": [Function],
                  "registerInnerOnSubmit": [Function],
                  "registeredFields": undefined,
                  "reset": [Function],
                  "sectionPrefix": undefined,
                  "setSubmitFailed": [Function],
                  "setSubmitSucceeded": [Function],
                  "shouldAsyncValidate": [Function],
                  "shouldError": [Function],
                  "shouldValidate": [Function],
                  "shouldWarn": [Function],
                  "startAsyncValidation": [Function],
                  "startSubmit": [Function],
                  "stopAsyncValidation": [Function],
                  "stopSubmit": [Function],
                  "submit": [Function],
                  "submitFailed": false,
                  "submitSucceeded": false,
                  "submitting": false,
                  "syncErrors": Object {},
                  "syncWarnings": Object {},
                  "touch": [Function],
                  "touchOnBlur": true,
                  "touchOnChange": false,
                  "triggerSubmit": undefined,
                  "unregister": [Function],
                  "unregisterField": [Function],
                  "untouch": [Function],
                  "updateSyncErrors": [Function],
                  "updateSyncWarnings": [Function],
                  "valid": true,
                  "validExceptSubmit": true,
                  "values": Object {},
                  "warning": undefined,
                }
              }
              component={[Function]}
              names={
                Array [
                  "firstName",
                  "lastName",
                ]
              }
            >
              <ConnectedFields
                _fields={
                  Object {
                    "firstName": Object {
                      "_value": undefined,
                      "asyncError": undefined,
                      "asyncValidating": false,
                      "dirty": false,
                      "initial": undefined,
                      "pristine": true,
                      "state": undefined,
                      "submitError": undefined,
                      "submitFailed": undefined,
                      "submitting": undefined,
                      "syncError": undefined,
                      "syncWarning": undefined,
                      "value": undefined,
                    },
                    "lastName": Object {
                      "_value": undefined,
                      "asyncError": undefined,
                      "asyncValidating": false,
                      "dirty": false,
                      "initial": undefined,
                      "pristine": true,
                      "state": undefined,
                      "submitError": undefined,
                      "submitFailed": undefined,
                      "submitting": undefined,
                      "syncError": undefined,
                      "syncWarning": undefined,
                      "value": undefined,
                    },
                  }
                }
                _reduxForm={
                  Object {
                    "anyTouched": false,
                    "array": Object {
                      "insert": [Function],
                      "move": [Function],
                      "pop": [Function],
                      "push": [Function],
                      "remove": [Function],
                      "removeAll": [Function],
                      "shift": [Function],
                      "splice": [Function],
                      "swap": [Function],
                      "unshift": [Function],
                    },
                    "arrayInsert": [Function],
                    "arrayMove": [Function],
                    "arrayPop": [Function],
                    "arrayPush": [Function],
                    "arrayRemove": [Function],
                    "arrayRemoveAll": [Function],
                    "arrayShift": [Function],
                    "arraySplice": [Function],
                    "arraySwap": [Function],
                    "arrayUnshift": [Function],
                    "asyncErrors": undefined,
                    "asyncValidate": [Function],
                    "asyncValidating": false,
                    "autofill": [Function],
                    "blur": [Function],
                    "change": [Function],
                    "clearAsyncError": [Function],
                    "clearSubmit": [Function],
                    "clearSubmitErrors": [Function],
                    "component": [Function],
                    "destroy": [Function],
                    "destroyOnUnmount": false,
                    "dirty": false,
                    "dispatch": [Function],
                    "enableReinitialize": false,
                    "error": undefined,
                    "focus": [Function],
                    "forceUnregisterOnUnmount": false,
                    "form": "foobar",
                    "getFormState": [Function],
                    "getValues": [Function],
                    "initialValues": undefined,
                    "initialize": [Function],
                    "initialized": false,
                    "invalid": false,
                    "keepDirtyOnReinitialize": false,
                    "names": Array [
                      "firstName",
                      "lastName",
                    ],
                    "persistentSubmitErrors": false,
                    "pristine": true,
                    "pure": true,
                    "register": [Function],
                    "registerField": [Function],
                    "registerInnerOnSubmit": [Function],
                    "registeredFields": undefined,
                    "reset": [Function],
                    "sectionPrefix": undefined,
                    "setSubmitFailed": [Function],
                    "setSubmitSucceeded": [Function],
                    "shouldAsyncValidate": [Function],
                    "shouldError": [Function],
                    "shouldValidate": [Function],
                    "shouldWarn": [Function],
                    "startAsyncValidation": [Function],
                    "startSubmit": [Function],
                    "stopAsyncValidation": [Function],
                    "stopSubmit": [Function],
                    "submit": [Function],
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "syncErrors": Object {},
                    "syncWarnings": Object {},
                    "touch": [Function],
                    "touchOnBlur": true,
                    "touchOnChange": false,
                    "triggerSubmit": undefined,
                    "unregister": [Function],
                    "unregisterField": [Function],
                    "untouch": [Function],
                    "updateSyncErrors": [Function],
                    "updateSyncWarnings": [Function],
                    "valid": true,
                    "validExceptSubmit": true,
                    "values": Object {},
                    "warning": undefined,
                  }
                }
                component={[Function]}
                dispatch={[Function]}
                names={
                  Array [
                    "firstName",
                    "lastName",
                  ]
                }
              >
                <renderFields
                  firstName={
                    Object {
                      "input": Object {
                        "name": "firstName",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onDragStart": undefined,
                        "onDrop": undefined,
                        "onFocus": [Function],
                        "value": "",
                      },
                      "meta": Object {
                        "active": false,
                        "asyncValidating": false,
                        "autofilled": false,
                        "dirty": false,
                        "dispatch": [Function],
                        "error": undefined,
                        "form": "foobar",
                        "initial": undefined,
                        "invalid": false,
                        "pristine": true,
                        "submitFailed": false,
                        "submitting": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                        "warning": undefined,
                      },
                    }
                  }
                  lastName={
                    Object {
                      "input": Object {
                        "name": "lastName",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onDragStart": undefined,
                        "onDrop": undefined,
                        "onFocus": [Function],
                        "value": "",
                      },
                      "meta": Object {
                        "active": false,
                        "asyncValidating": false,
                        "autofilled": false,
                        "dirty": false,
                        "dispatch": [Function],
                        "error": undefined,
                        "form": "foobar",
                        "initial": undefined,
                        "invalid": false,
                        "pristine": true,
                        "submitFailed": false,
                        "submitting": false,
                        "touched": false,
                        "valid": true,
                        "visited": false,
                        "warning": undefined,
                      },
                    }
                  }
                  names={
                    Array [
                      "firstName",
                      "lastName",
                    ]
                  }
                >
                  <div>
                    <div
                      className="input-row"
                    >
                      <input
                        name="firstName"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="input-row"
                    >
                      <input
                        name="lastName"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="text"
                        value=""
                      />
                    </div>
                  </div>
                </renderFields>
              </ConnectedFields>
            </Connect(ConnectedFields)>
          </Fields>
        </ReduxFields>
      </Form(ReduxFields)>
    </Connect(Form(ReduxFields))>
  </ReduxForm>
</Connect(ReduxForm)>
`;
